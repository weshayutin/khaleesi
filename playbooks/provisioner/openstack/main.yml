---
- name: Create nodes - OpenStack
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Create nodes
      nova_compute:
           auth_url: "{{ provisioner.auth_url }}"
           state: present
           login_username: "{{ provisioner.username }}"
           login_password: "{{ provisioner.password }}"
           login_tenant_name: "{{ provisioner.tenant_name }}"
           name: "{{ item.value.name }}"
           image_id: "{{ item.value.image_id }}"
           key_name: "{{ provisioner.key_name }}"
           flavor_id: "{{ item.value.flavor_id }}"
           nics:
              - net-id: "{{ provisioner.network.network_list.management.id }}"
              - net-id: "{{ provisioner.network.network_list.data.id }}"
              - net-id: "{{ provisioner.network.network_list.external.id }}"
           config_drive: True
           floating_ip_pools:
             - "external"
           wait_for: 200
      retries: 4
      with_dict: provisioner.nodes
      register: created_nodes

    - name: Add created hosts to host list
      add_host:
        name="{{ item.item.value.name }}"
        groups="{{ item.item.value.groups
            if item.item.value.groups is string
            else item.item.value.groups| join(',') }}"
        ansible_fqdn="{{ item.item.value.hostname }}"
        ansible_ssh_user="{{ item.item.value.remote_user }}"
        ansible_ssh_private_key_file="{{ provisioner.key_file }}"
        ansible_ssh_host={%- if item.public_ip %}{{ item.public_ip }}{%- else %}{{ item.info.addresses[provisioner.network.network_list.management.name][0].addr }}{% endif %}
        eth1_interface_ip="{{ item.info.addresses[provisioner.network.network_list.data.name][0].addr }}"
      with_items: created_nodes.results

- name: wait for hosts to get reachable
  hosts: openstack_nodes
  gather_facts: no
  max_fail_percentage: 0
  tasks:
    - local_action:
        module: wait_for_ssh host={{ hostvars[inventory_hostname].ansible_ssh_host }} user={{ hostvars[inventory_hostname].ansible_ssh_user }} key={{ hostvars[inventory_hostname].ansible_ssh_private_key_file }}
      sudo: no

- name: Update network interfaces on nodes - OpenStack
  hosts: openstack_nodes
  gather_facts: yes
  max_fail_percentage: 0
  sudo: yes
  tasks:
    - name: updating host short name
      set_fact: inventory_hostname_short="{{ inventory_hostname.split('-')|last }}"

    - name: Setup networking (interfaces)
      template:
            src: ../templates/ifcfg-interface.j2
            dest: /etc/sysconfig/network-scripts/ifcfg-{{ item.value.label }}
            owner: root
            group: root
            mode: 644
      with_dict:
          provisioner.nodes[inventory_hostname_short].network.interfaces
      register: update_ifcfgs

    #TODO(tkammer): write this better by fixing the upstream module to provide the private IP properly
    - name: update IP address of eth1 interface
      lineinfile:
          dest: /etc/sysconfig/network-scripts/ifcfg-eth1
          regexp: IPADDR=
          line: "IPADDR={{ hostvars[inventory_hostname].eth1_interface_ip }}"
      register: update_ifcfg1

    - local_action:
        module: wait_for_ssh reboot_first=true host={{ hostvars[inventory_hostname].ansible_ssh_host }} user={{ hostvars[inventory_hostname].ansible_ssh_user }} key={{ hostvars[inventory_hostname].ansible_ssh_private_key_file }}
      when: update_ifcfgs|changed or update_ifcfg1|changed
      sudo: no

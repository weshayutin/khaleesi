---
- include: "{{ base_dir }}/khaleesi/playbooks/group_by.yml ansible_ssh_user=root"

- name: Setup openstack repos
  hosts: "{{ repo_host }}:&RedHat"
  vars:
    - ansible_ssh_user: root
  gather_facts: yes
  tasks:
      - name: Install release tool on machine
        command: "yum localinstall -y {{ product.rpm }}"

      #this will uncouple the virthost version from the undercloud and overcloud rhel versions
      - name: create directory for DIB yum repo configurations
        file: path={{installer.dib_dir}} state=directory mode=0755

      - name: Execute rhos-release for pinned osp-director puddle (osp)
        sudo: yes
        shell: >
          rhos-release -p {{ product.repo.puddle_director_pin_version }} {{ product.full_version }};
          rhos-release -r {{ distro.full_version }} -t {{installer.dib_dir}} -p {{ product.repo.puddle_director_pin_version }} {{ product.full_version }};
        register: pinned_puddle
        when: product.repo_type in ['puddle'] and product.repo.puddle_director_pin_version not in ['latest']

      - name: Execute rhos-release for latest osp-director puddle (osp)
        sudo: yes
        shell: >
          rhos-release -P {{ product.full_version }};
          rhos-release -r {{ distro.full_version }} -t {{installer.dib_dir}} -P {{ product.full_version }};
        register: pinned_puddle
        when: product.repo_type in ['puddle'] and product.repo.puddle_director_pin_version == 'latest'

      - name: Execute rhos-release for core rhos puddle (osp)
        sudo: yes
        shell: >
          rhos-release -p {{ product.repo.puddle_pin_version }} {{ product.repo.core_product_version }};
          rhos-release -r {{ distro.full_version }} -t {{installer.dib_dir}} -p {{ product.repo.puddle_pin_version }} {{ product.repo.core_product_version }};
        register: pinned_puddle
        when: product.repo_type == 'puddle' and product.repo.puddle_pin_version not in  ['latest']

      - name: Execute rhos-release for core rhos puddle (osp)
        sudo: yes
        shell: >
          rhos-release -P {{ product.repo.core_product_version }};
          rhos-release -r {{ distro.full_version }} -t {{installer.dib_dir}} -P {{ product.repo.core_product_version }};
        register: pinned_puddle
        when: product.repo_type in ['puddle'] and product.repo.puddle_pin_version == 'latest'

      - name: Execute rhos-release for pinned osp-director poodle (osp)
        sudo: yes
        shell: >
          rhos-release  -d -p {{ product.repo.poodle_pin_version }} {{ product.full_version }};
          rhos-release -r {{ distro.full_version }} -t {{installer.dib_dir}} -d -p {{ product.repo.poodle_pin_version }} {{ product.full_version }};
        register: pinned_poodle
        when: product.repo_type in ['poodle'] and product.repo.poodle_pin_version not in ['latest']

      - name: Execute rhos-release for latest osp-director poodle (osp)
        sudo: yes
        shell: >
          rhos-release -d -P {{ product.full_version }};
          rhos-release -r {{ distro.full_version }} -t {{installer.dib_dir}} -d -P {{ product.full_version }};
        register: pinned_poodle
        when: product.repo_type in ['poodle']  and product.repo.poodle_pin_version == 'latest'

      - name: yum clean all
        command: yum clean all

# - name: Get build details
#   hosts: "{{ repo_host }}:&RedHat"
#   vars:
#     - ansible_ssh_user: root
#   roles:
#     - build_mark/build

- name: Linux common prep (Collect performance data, etc.)
  hosts: "{{ repo_host }}"
  vars:
    - ansible_ssh_user: root
  roles:
    - { role: linux-common }

- name: Update packages on the host
  hosts: "{{ repo_host }}"
  vars:
    - ansible_ssh_user: root
  tasks:
    - name: repolist
      command: yum -d 7 repolist

    - name: update all packages
      yum: name=* state=latest
      when: yum_update | bool

    - name: Find if a new kernel was installed
      shell: find /boot/ -anewer /proc/1/stat -name 'initramfs*' | egrep ".*"
      register: new_kernel
      ignore_errors: True
      when: "'{{ repo_host }}' == 'virthost'"

    - name: reboot host
      sudo: no
      local_action:
        wait_for_ssh
          reboot_first=true
          host="{{ ansible_ssh_host }}"
          user="root"
          key="{{ ansible_ssh_private_key_file }}"
          timeout=900
          sudo=false
      when: "'{{ repo_host }}' == 'virthost' and new_kernel.rc == 0"

---
- name: delete an overcloud node of a certain type
  hosts: undercloud
  tasks:
    - name: set node type to delete
      set_fact: node_type_to_delete={{item}}
      when: installer.nodes.{{item}}.scale_change is defined
      with_items:
        - compute
        - cephstorage
        - blockstorage
        - swiftstorage

    - name: setup vars
      template: src=templates/delete-nodes-setup-env.j2 dest=~/delete-nodes-setup-env mode=0755
      when: node_type_to_delete is defined

    - name: check that overcloud is in complete state
      shell: >
        source {{ instack_user_home }}/stackrc;
        heat stack-list
      register: heat_stack_list_result
      when: node_type_to_delete is defined

    - name: fail if stack did not complete
      fail: msg="Stack did not complete"
      when: node_type_to_delete is defined and heat_stack_list_result.stdout.find("COMPLETE") == -1

    - name: get nodes from nova list
      shell: >
        source {{ instack_user_home }}/stackrc;
        source {{ instack_user_home }}/delete-nodes-setup-env;
        nova list | grep $NODE_TO_DELETE_TYPE | cut -f2- -d':' | wc -l
      register: nova_list_count_before
      when: node_type_to_delete is defined

    - name: get id of node to be deleted
      shell: >
        source {{ instack_user_home }}/stackrc;
        source {{ instack_user_home }}/delete-nodes-setup-env;
        nova list | grep -m 1 $NODE_TO_DELETE_TYPE | sed -e 's/|//g' | awk '{print $1}'
      register: node_id_to_delete
      when: node_type_to_delete is defined

    - name: get name of node to be deleted
      shell: >
        source {{ instack_user_home }}/stackrc;
        source {{ instack_user_home }}/delete-nodes-setup-env;
        nova list | grep -m 1 $NODE_TO_DELETE_TYPE | sed -e 's/|//g' | awk '{print $2}'
      register: node_name_to_delete
      when: node_type_to_delete is defined

    - name: list node to be deleted
      debug: var=node_name_to_delete.stdout
      when: node_type_to_delete is defined

    - name: copy template file with environment variables for nodes
      template:
        src={{ base_dir }}/khaleesi/playbooks/installer/rdo-manager/templates/deploy-nodes.j2
        dest={{ instack_user_home }}/deploy-nodesrc
        mode=0755

    - name: setup command vars
      template: src=templates/delete-nodes-command-env.j2 dest=~/delete-nodes-command-env mode=0755
      when: node_type_to_delete is defined

      #NOTE, once a node is deleted and additional ansible calls to the node will fail
    - name: get command to delete the node by id
      shell: >
        source {{ instack_user_home }}/stackrc;
        source {{ instack_user_home }}/deploy-nodesrc;
        source {{ instack_user_home }}/delete-nodes-setup-env;
        source {{ instack_user_home }}/delete-nodes-command-env;
        echo $DELETE_COMMAND
      register: delete_command_output
      when: node_type_to_delete is defined

    - name: run command to delete the node by id
      shell: >
        source {{ instack_user_home }}/stackrc;
        source {{ instack_user_home }}/deploy-nodesrc;
        source {{ instack_user_home }}/delete-nodes-setup-env;
        source {{ instack_user_home }}/delete-nodes-command-env;
        {{ delete_command_output.stdout }} &> overcloud_deployment_delete.log
      when: node_type_to_delete is defined

    - name: poll for heat stack-list to go to COMPLETE
      shell: >
        source {{ instack_user_home }}/stackrc;
        heat stack-list
      register: heat_stack_list_result
      until: heat_stack_list_result.stdout.find("COMPLETE") != -1
      retries: 10
      delay: 180
      when: node_type_to_delete is defined

    - name: get the number of nodes
      shell: >
        source {{ instack_user_home }}/stackrc;
        source {{ instack_user_home }}/delete-nodes-setup-env;
        nova list | grep $NODE_TO_DELETE_TYPE | cut -f2- -d':' | wc -l
      register: nova_list_count_after
      when: node_type_to_delete is defined

    - name: get nova list
      shell: >
        source {{ instack_user_home }}/stackrc;
        nova list
      register: nova_list_after
      when: node_type_to_delete is defined

    - name: check the deleted node is not in nova list
      fail: msg="Deleted node is still in nova list output."
      when: (node_type_to_delete is defined) and nova_list_after.stdout.find(node_id_to_delete.stdout) != -1

    - name: get nova service-list for compute nodes
      shell: >
        source {{ instack_user_home }}/overcloudrc;
        source {{ instack_user_home }}/delete-nodes-setup-env;
        nova service-list | grep nova-compute
      register: nova_service_compute
      when: node_type_to_delete is defined and node_type_to_delete == 'compute'

    - name: check the service list shows a compute node down
      fail: msg="Overcloud nova list does not show expected number of compute services up/down"
      when: (node_type_to_delete is defined) and node_type_to_delete == 'compute' and nova_service_compute.stdout.find("down") == -1

- name: check ceph status on controller node
  hosts: overcloud-controller-0:&delete_node
  tasks:
    - name: get ceph status for ceph nodes
      shell: >
        sudo ceph -s
      register: ceph_s
      when: node_type_to_delete is defined and node_type_to_delete == 'cephstorage'

- name: remove deleted node from the ansible hosts file
  hosts: undercloud:&delete_node
  tasks:
    - name: delete the node from the ansible hosts file
      delegate_to: localhost
      lineinfile: dest="{{ lookup('env', 'PWD') }}/hosts" state=absent regexp="^{{ node_name_to_delete.stdout }}"
      when: node_type_to_delete is defined


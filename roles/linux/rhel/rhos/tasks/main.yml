---
- name: Create the RHOS Release Repository
  template: src=rhos-release.repo.j2 dest=/etc/yum.repos.d/rhos-release.repo
  when: product.repo_type_override is not defined

- name: install rhos-release
  yum: name=rhos-release state=latest
  when: product.repo_type_override is not defined

- name: Execute rhos-release {{ product.version|int }}
  command: "rhos-release {{ product.version|int }}"
  notify:
    - Yum clean all
    - yum -y update to latest packages
  when: product.repo_type_override is not defined

- name: Execute rhos-release for rdo-manager {{ product_override_version|int }}
  command: "rhos-release {{ product_override_version|int }}"
  notify:
    - Yum clean all
    - yum -y update to latest packages
  when: product.repo_type_override is not defined

- name: Execute rhos-release {{ product.version|int }}{{ installer_host_repo | default('')}}
  command: "rhos-release {{ product.version|int }}{{ installer_host_repo | default('')}}"
  notify:
    - Yum clean all
    - yum -y update to latest packages
  when: installer is defined and installer.name == "foreman" and installer_host_repo | default('') != ''

- name: Change server location for repos in  rhos-release
  replace:
    dest=/etc/yum.repos.d/rhos-release-{{product.version|int}}{{ installer_host_repo | default('')}}-rhel-{{ ansible_distribution_version|string}}.repo
    regexp={{ location.defaultrepo_string }}
    replace={{ location.map[user_location] }}
  when: user_location is defined

- name: Change puddle version for repos in rhos-release
  replace:
    dest=/etc/yum.repos.d/rhos-release-{{product.version|int}}{{ installer_host_repo | default('')}}-rhel-{{ ansible_distribution_version|string}}.repo
    regexp=/latest/RH{{ ansible_distribution_major_version|string }}
    replace=/{{ product.repo.puddle_pin_version }}/RH{{ ansible_distribution_major_version|string }}
  when: (product.repo.puddle_pin_version is defined and product.repo.puddle_pin_version != 'latest' and product.repo_type == 'puddle')

- name: Change Foreman version for repos in rhos-release
  replace:
    dest=/etc/yum.repos.d/rhos-release-{{product.version|int}}{{ installer_host_repo | default('')}}-rhel-{{ ansible_distribution_version|string }}.repo
    regexp=/Foreman/latest/
    replace=/Foreman/{{ product.repo.foreman_pin_version }}/
  when: (product.repo.foreman_pin_version is defined and product.repo.foreman_pin_version != 'latest')

- name: Enable RHSM
  shell: >
    rhos-release  -x {{ product.version|int }}{{ installer_host_repo | default('')}};
    rm -Rf /etc/yum.repos.d/rhos-release.repo;
    subscription-manager register --username {{ distro.rhel.subscription.username }} --password {{ distro.rhel.subscription.password }};
    subscription-manager subscribe --pool {{ distro.rhel.subscription.pool }};
    subscription-manager repos --disable=*;
  when: (product.repo_type == 'rhsm' and ansible_distribution_version|int == 7)

- name: Enable RHSM yum repos
  shell: >
    subscription-manager repos --disable=*;
    subscription-manager repos --enable=rhel-7-server-rpms;
    subscription-manager repos --enable=rhel-7-server-optional-rpms;
    subscription-manager repos --enable=rhel-7-server-extras-rpms;
    subscription-manager repos --enable=rhel-7-server-openstack-{{ product.version }}-rpms;
    yum-config-manager --setopt="rhel-7-server-openstack-{{ product.version }}-rpms.priority=1" --enable rhel-7-server-openstack-{{ product.version }}-rpms;
  when: (product.repo_type == 'rhsm' and ansible_distribution_version|int == 7)

- name: Enable RHSM for rdo-manager
  shell: >
    rm -Rf /etc/yum.repos.d/rhos-release.repo;
    subscription-manager register --username {{ distro.rhel.subscription.username }} --password {{ distro.rhel.subscription.password }};
    subscription-manager subscribe --pool {{ distro.rhel.subscription.physical_pool }};
    subscription-manager repos --disable=*;
  when: (product_repo_type_override is defined and product_repo_type_override == 'rhsm' and ansible_distribution_version|int == 7)

- name: Enable RHSM yum repos for rdo-manager
  shell: >
    subscription-manager repos --disable=*;
    subscription-manager repos --enable=rhel-7-server-rpms;
    subscription-manager repos --enable=rhel-7-server-optional-rpms;
    subscription-manager repos --enable=rhel-7-server-extras-rpms;
    subscription-manager repos --enable=rhel-7-server-openstack-{{ product_override_version }}-rpms;
    yum-config-manager --setopt="rhel-7-server-openstack-{{ product_override_version }}-rpms.priority=1" --enable rhel-7-server-openstack-{{ product_override_version }}-rpms;
  when: (product_repo_type_override is defined and product_repo_type_override == 'rhsm' and ansible_distribution_version|int == 7)


- name: ensure yum-utils
  yum: name=yum-utils state=present

- name: Disable default foreman puddle rhelosp repo when using poodle
  shell: /usr/bin/yum-config-manager --disable 'rhelosp-*-OS-Foreman'
  when: product.repo_type == 'poodle'

# new advanced repos
- name: Create the RHOS Advanced repository
  shell: "rhos-release  -x {{ product.version|int }};  rhos-release {{ product.version|int }}a"
  when: product.repo_type == 'advanced'

# poodle repos
- name: Create the RHOS poodle repository
  shell: "rhos-release  -x {{ product.version|int }}{{ installer_host_repo | default('')}};  rhos-release  -d {{ product.version|int }}{{ installer_host_repo | default('')}}"
  when: product.repo_type == 'poodle'

- name: Create the RHOS Advanced  poodle repository
  shell: "rhos-release  -x {{ product.version|int }};  rhos-release  -d {{ product.version|int }}a"
  when: product.repo_type == 'poodle_advanced'

- name: Create the COPR repos required for component tests
  template: src=apevec-copr-repo.j2 dest=/etc/yum.repos.d/apevec-copr.repo
  when: (test.type.name is defined and test.type.name == 'unit-test' and ansible_distribution_version|int >= 7)

- name: Change poodle version for repos in rhos-release
  shell: "rhos-release  -x {{ product.version|int }}; rhos-release  {{ product.version|int }} -d -p {{ product.repo.poodle_pin_version }}"
  when: (product.repo.poodle_pin_version is defined and product.repo.poodle_pin_version != 'latest|GA' and product.repo_type == 'poodle'  and installer_host_repo | default('') == '')

- name: Change poodle version for repos in rhos-release for OFI installer host
  shell: "rhos-release  -x {{ product.version|int }}{{ installer_host_repo | default('')}};  rhos-release  {{ product.version|int }}{{ installer_host_repo | default('')}} -d -p {{ product.repo.installer_poodle_pin_version }}"
  when: (product.repo.installer_poodle_pin_version is defined and product.repo.installer_poodle_pin_version != 'latest|GA' and product.repo_type == 'poodle' and installer is defined and installer.name == "foreman" and installer_host_repo | default('') != '')

- name: Change poodle version for repos in rhos-release for GA -> Latest Poodle
  shell: "rhos-release  -x {{ product.version|int }};  rhos-release  {{ product.version|int }} -p {{ product.repo.poodle_pin_version }}"
  when: (product.repo.poodle_pin_version is defined and product.repo.poodle_pin_version == 'GA' and product.repo_type == 'poodle' and installer_host_repo | default('') == '')

- name: Change poodle version for repos in rhos-release for OFI installer host and GA-> latest Poodle
  shell: "rhos-release  -x {{ product.version|int }}{{ installer_host_repo | default('')}};  rhos-release  {{ product.version|int }}{{ installer_host_repo | default('')}} -d -p {{ product.repo.installer_poodle_pin_version }}"
  when: (product.repo.installer_poodle_pin_version is defined and product.repo.installer_poodle_pin_version == 'latest|GA' and product.repo_type == 'poodle' and installer is defined and installer.name == "foreman" and installer_host_repo | default('') != '')

# copr repos
- name: enable tripleo copr repository
  shell: "sudo curl -o /etc/yum.repos.d/slagle-openstack-m.repo {{ product.repo.copr[ ansible_distribution ][distro.version] }}"
  when: product.repo.copr is defined
  register: rdo_repo_output

- name: print rdo_repo_output
  debug: var=rdo_repo_output.stdout
  when: product.repo.copr is defined

# custom repos
- name: enable a custom repository
  yum: name="{{ installer.custom_repo }}"
  when: installer.custom_repo is defined
  register: rdo_repo_output

- name: print rdo_repo_output
  debug: var=rdo_repo_output.stdout
  when: installer.custom_repo is defined

- name: Ensure common dependencies
  yum: name={{ item }} state=present
  with_items:
    - libselinux-python

- name: Install vim
  yum: name=vim state=installed

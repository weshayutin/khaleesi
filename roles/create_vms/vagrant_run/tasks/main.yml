---
- name: Install ksgen
  command: "{{ ansible_env.HOME }}/.venv/bin/python setup.py develop
           chdir={{ ansible_env.HOME }}/khaleesi/tools/ksgen"


- name: create group dir
  file: state=directory path={{ ansible_env.HOME }}/baremetal-install-groups/group1

- name: copy Vagrant file on install group
  copy: src=Vagrantfile dest={{ ansible_env.HOME}}/baremetal-install-groups/group1

- name: copy useful exports for cli debugging
  template: src=vagrant-exports.j2 dest={{ ansible_env.HOME}}/baremetal-install-groups/group1/vagrant-exports

- name: Run ksgen
  command: "{{ ansible_env.HOME }}/.venv/bin/ksgen
              --config-dir={{ ansible_env.HOME }}/khaleesi-settings/settings generate
              --rules={{ ansible_env.HOME }}/khaleesi-settings/rules/packstack-rdo-baremetal.yml
              --provisioner=manual
              --product-version=juno
              --product-version-workaround=rhel-7.0
              --product-version-repo=production
              --workarounds=enabled
              --distro=rhel-7.0
              --installer-network=neutron
              --installer-network-variant=ml2-vxlan
              --installer-messaging=rabbitmq
              --tester-tests=minimal
              ksgen_settings.yml
              chdir={{ ansible_env.HOME }}/baremetal-install-groups/group1"

- name: pre create vagrant ansible inventory dir
  file:  path={{ansible_env.HOME}}/baremetal-install-groups/group1/.vagrant/provisioners/ansible/inventory/ state=directory

- name: make group vars available to inner ansible
  command: cp -a {{ansible_env.HOME}}/khaleesi/group_vars {{ansible_env.HOME}}/baremetal-install-groups/group1/.vagrant/provisioners/ansible/inventory/

- name: Run vagrant
  command: "vagrant up chdir={{ ansible_env.HOME }}/baremetal-install-groups/group1"
  environment: vagrant_environment

- name: get ip addresses of guests
  shell: >
   cat  /var/lib/libvirt/dnsmasq/default.leases  | awk -F " " '{print $3}' > /tmp/leases
  register: result

- name: get ip addresses of guests
  shell: >
   cat  /var/lib/libvirt/dnsmasq/default.leases  | awk -F " " '{print $3}' | tr '\n' ', '
  register: result


- name: print ip addresses of guests
  debug: msg={{result.stdout_lines}}

- name: Create ssh key if one does not exist
  # this will not overwrite an existing key
  user: name=root generate_ssh_key=yes
  sudo: yes
  sudo_user: root

- name: add id_rsa to authorized_keys
  shell: cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys
  sudo: yes
  sudo_user: root

- name: ensure sshpass
  yum: name=sshpass state=latest

- name: add ssh key to guests
  shell: >
   for i in `cat /tmp/leases`; do sshpass -p vagrant ssh-copy-id vagrant@$i; done
  ignore_errors: true

